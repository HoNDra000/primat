import sqlite3
import humanize

def Lvl_prices(level):
    x = 10000000 #–¥–µ—Å—è—Ç—å –º–∏–ª–ª–∏–æ–Ω–æ–≤
    price_lvl = {
        1: x,
        2: x*50,
        3: x*150,
        4: x*450,
        5: x*1500,
        6: x*3500,
        7: x*7000,
        8: x*10000,
        9: x*100000,
        10: x*1000000}
    return price_lvl.get(level)

def next_price(next_level, user):
    from helpmethod.readdb import get_koef
    coef = int(get_koef(user)) * 2
    x = 10000000 #–¥–µ—Å—è—Ç—å –º–∏–ª–ª–∏–æ–Ω–æ–≤
    price_lvl = {
        1: x*coef,
        2: x*50*coef,
        3: x*150*coef,
        4: x*450*coef,
        5: x*1500*coef,
        6: x*3500*coef,
        7: x*7000*coef,
        8: x*10000*coef,
        9: x*100000*coef,
        10: x*1000000*coef,
        11: '–≠—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.'}
    return price_lvl.get(next_level)

def menu_levelup(user):
    from helpmethod.readdb import get_lvl
    level = get_lvl(user)
    next_level = int(level) + 1
    if next_level == 11:
        nl = '–≠—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å'
    else:
        nl = next_level
    next_cost = next_price(next_level,user)
    ret = '''–¢—ã –ø–æ–ø–∞–ª –≤ –º–µ–Ω—é –ø—Ä–æ–∫–∞—á–∫–∏ —É—Ä–æ–≤–Ω—è!
–°–µ–π—á–∞—Å —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {level}
–°–ª–µ–¥—É—é—â–∏–π —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {next_level}
–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {next_level_cost}'''.format(level=level,next_level=nl,next_level_cost=next_cost)
    return ret
def get_new_rules(next_level):
    if next_level == 1:
        new_rules = '\n1.–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã "–±–æ–Ω—É—Å"\n2.–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã "–ø–µ—Ä–µ–≤–æ–¥"\n3.10üíé –Ω–∞ —Å—á—ë—Ç.'
    elif next_level == 2:
        new_rules = '\n1.30üíé –Ω–∞ —Å—á—ë—Ç.'
    elif next_level == 3:
        new_rules = '\n1.–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã "—Å–µ—Ç–Ω–∏–∫"\n2.100üíé –Ω–∞ —Å—á—ë—Ç'
    elif next_level == 4:
        new_rules = '\n1.25 –∫–µ–π—Å–∏–∫–æ–≤\n2.250üíé –Ω–∞ —Å—á—ë—Ç'
    elif next_level == 5:
        new_rules = '\n1.15 –∫–µ–π—Å–∏–∫–æ–≤\n2.200üíé –Ω–∞ —Å—á—ë—Ç\n3.–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∫–∞–∑–∏–Ω–æ "—Ä—É–ª–µ—Ç–∫–∞"'
    elif next_level == 6:
        new_rules = '\n1.35 –∫–µ–π—Å–∏–∫–æ–≤\n2.150üíé –Ω–∞ —Å—á—ë—Ç'
    elif next_level == 7:
        new_rules = '\n1.–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã "—Ä–µ–±–∏—Ç—Ö"\n2.50 –∫–µ–π—Å–∏–∫–æ–≤\n3.300üíé –Ω–∞ —Å—á—ë—Ç'
    elif next_level == 8:
        new_rules = '\n1.–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∫–∞–∑–∏–Ω–æ "–∞–≤—Ç–æ–º–∞—Ç"\n2.120 –∫–µ–π—Å–∏–∫–æ–≤\n3.600üíé –Ω–∞ —Å—á—ë—Ç\nP.s.–ù–∞ –°–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–≤–Ω—è—Ö –Ω–µ –±—É–¥–µ—Ç –Ω–∞–≥—Ä–∞–¥.'
    elif next_level == 9:
        new_rules = '\n–ù–µ—Ç—É –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤.'
    elif next_level == 10:
        new_rules = '\n–ù–µ—Ç—É –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤.'
    elif next_level == 11:
        new_rules = '\n–ù–µ—Ç—É –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤.'
    return new_rules

def level_up(user):
    from helpmethod.readdb import get_lvl, get_balance
    balance = get_balance(user)
    level = get_lvl(user)
    next_level = int(level) + 1
    price = next_price(next_level, user)
    if level < 10:
        if int(balance) < int(price):
            mess = '–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ —É—Ä–æ–≤–Ω—è, –ø–æ–∏–≥—Ä–∞–π –≤ –∫–∞–∑–∏–∫ —á—Ç–æ–ª–µ...'
            return mess
        else:

            result = int(balance) - int(price)

            sqlite_connection = sqlite3.connect('databases\MDB.db')
            cur = sqlite_connection.cursor()

            cur.execute(f"""UPDATE users SET balance = ? WHERE id = ?""", (str(result), user))
            sqlite_connection.commit()
            cur.execute(f"""UPDATE users SET level = ? WHERE id = ?""", (next_level, user))
            sqlite_connection.commit()
            

            new_rules = get_new_rules(next_level)

            from helpmethod.readdb import get_specbal, get_case

            if next_level == 1:
                old = get_specbal(user)
                res = old + 10
                cur.execute(f"""UPDATE users SET spec_bal = ? WHERE id = ?""", (res, user))
                sqlite_connection.commit()
            elif next_level == 2:
                old = get_specbal(user)
                res = old + 30
                cur.execute(f"""UPDATE users SET spec_bal = ? WHERE id = ?""", (res, user))
                sqlite_connection.commit()
            elif next_level == 3:
                old = get_specbal(user)
                res = old + 100
                cur.execute(f"""UPDATE users SET spec_bal = ? WHERE id = ?""", (res, user))
                sqlite_connection.commit()
            elif next_level == 4:
                old = get_specbal(user)
                olld = get_case(user)
                rees = olld + 25
                res = old + 250
                cur.execute(f"""UPDATE users SET spec_bal = ? WHERE id = ?""", (res, user))
                sqlite_connection.commit()
                cur.execute(f"""UPDATE users SET cases = ? WHERE id = ?""", (rees, user))
                sqlite_connection.commit()
            elif next_level == 5:
                old = get_specbal(user)
                olld = get_case(user)
                rees = olld + 15
                res = old + 200
                cur.execute(f"""UPDATE users SET spec_bal = ? WHERE id = ?""", (res, user))
                sqlite_connection.commit()
                cur.execute(f"""UPDATE users SET cases = ? WHERE id = ?""", (rees, user))
                sqlite_connection.commit()
            elif next_level == 6:
                old = get_specbal(user)
                olld = get_case(user)
                rees = olld + 35
                res = old + 150
                cur.execute(f"""UPDATE users SET spec_bal = ? WHERE id = ?""", (res, user))
                sqlite_connection.commit()
                cur.execute(f"""UPDATE users SET cases = ? WHERE id = ?""", (rees, user))
                sqlite_connection.commit()
            elif next_level == 7:
                old = get_specbal(user)
                olld = get_case(user)
                rees = olld + 50
                res = old + 300
                cur.execute(f"""UPDATE users SET spec_bal = ? WHERE id = ?""", (res, user))
                sqlite_connection.commit()
                cur.execute(f"""UPDATE users SET cases = ? WHERE id = ?""", (rees, user))
                sqlite_connection.commit()
            elif next_level == 8:
                old = get_specbal(user)
                olld = get_case(user)
                rees = olld + 120
                res = old + 600
                cur.execute(f"""UPDATE users SET spec_bal = ? WHERE id = ?""", (res, user))
                sqlite_connection.commit()
                cur.execute(f"""UPDATE users SET cases = ? WHERE id = ?""", (rees, user))
                sqlite_connection.commit()

            mess = '–¢—ã —É–ª—É—á—à–∏–ª —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ ' + str(next_level) + '\n–£ —Ç–µ–±—è –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –æ—Å—Ç–∞–ª–æ—Å—å: ' + humanize.intcomma(str(balance)) + '$\n\n–¢—ã –ø–æ–ª—É—á–∞–µ—à—å:' + new_rules
            cur.close()
            return mess
    else:
        mess = '–£ —Ç–µ–±—è —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.'
        return mess

def rebirth(user):
    from helpmethod.readdb import get_koef, get_lvl
    level = get_lvl(user)
    if level > 7 or level == 7:
        sqlite_connection = sqlite3.connect('databases\MDB.db')
        cur = sqlite_connection.cursor()

        old_koef = get_koef(user)
        res_koef = int(old_koef) + 1
        rebirth = int(res_koef) - 1

        cur.execute(f"""UPDATE users SET balance = ? WHERE id = ?""", (1000000, user))
        sqlite_connection.commit()
        cur.execute(f"""UPDATE users SET level = ? WHERE id = ?""", (0, user))
        sqlite_connection.commit()
        cur.execute(f"""UPDATE users SET spec_bal = ? WHERE id = ?""", (0, user))
        sqlite_connection.commit()
        cur.execute(f"""UPDATE users SET koef = ? WHERE id = ?""", (res_koef, user))
        sqlite_connection.commit()
        cur.execute(f"""UPDATE users SET rabs = ? WHERE id = ?""", (0, user))
        sqlite_connection.commit()
        cur.close()
        mess = '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —Ä–µ–±–∏—Ç—Ö–æ–º! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è ' + str(rebirth) + ' —Ä–µ–±–∏—Ç—Ö–æ–≤ (–ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏–π)'
    else:
        mess = '–¢–µ–±–µ –Ω—É–∂–µ–Ω 7 –∏–ª–∏ –±–æ–ª–µ–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ—Ä–æ–∂–¥–µ–Ω–∏—è.'
    return mess